<?xml version="1.0"?>
<PropertyList>
 <sim>

  <description>Airbus A380</description>

  <flight-model>jsb</flight-model>
  <aero>A380</aero>

  <systems>
   <autopilot>
    <path>Aircraft/A380/A380-autopilot.xml</path>
   </autopilot>
   	<!--Modified by Ampere-->
	<electrical>
		<path>Aircraft/A380/Systems/Electrical/electrical.xml</path>
	</electrical>
	<hydraulical>
		<path>Aircraft/A380/Systems/Hydraulical/hydraulics.xml</path>
	</hydraulical>
	<!--End modifications -->
  </systems> 
  
  <sound>
   <path>Aircraft/737/Sounds/737-sound.xml</path>
  </sound>

  <panel>
   <path>Aircraft/737/Panels/737-ifr-panel.xml</path>
   <visibility>false</visibility>
  </panel>
  
  <model>
   <path>Aircraft/A380/XML/A380.xml</path>
  </model>
   
  <view>
   <internal archive="y">true</internal>
   <config>
     <!-- x/y/z == right/up/back -->
     <x-offset-m archive="y">-0.53</x-offset-m>
     <y-offset-m archive="y">-1.6</y-offset-m>
     <z-offset-m archive="y">10.41</z-offset-m>
     <pitch-offset-deg archive="y">-8.0</pitch-offset-deg>
   </config>
  </view>
  
  <view n="1">
   <config>
     <!-- big plane, so extend chase view offset a bit -->
     <target-z-offset-m archive="y">36.3635</target-z-offset-m>
   </config>
  </view>

  <chase-distance-m>-75</chase-distance-m>

    
  <!-- turns off GA tower communications -->
  <ATC>
   <enabled type="bool">false</enabled>
  </ATC>

  <!-- turns off GA traffic -->
  <ai-traffic>
   <enabled type="bool">false</enabled>
  </ai-traffic>

  <help>
   <title>Airbus A380</title>
  </help>

 </sim>
   
  <consumables>
  <fuel>
   <tank n="0">
     <level-gal_us archive="y">12000</level-gal_us>
   </tank>
   <tank n="1">
    <level-gal_us archive="y">12000</level-gal_us>
   </tank>
   <tank n="2">
    <level-gal_us archive="y">12000</level-gal_us>
   </tank>
   <tank n="3">
    <level-gal_us archive="y">12000</level-gal_us>
   </tank>
  </fuel>
 </consumables>
 
 <engines>
  <engine n="0">
    <running>false</running>
  </engine>
  <engine n="1">
    <running>false</running>
  </engine>
  <engine n="2">
    <running>false</running>
  </engine>
  <engine n="3">
    <running>false</running>
  </engine>
 </engines>

 <radios>
  <dme>
    <switch-position>1</switch-position>
  </dme>
 </radios>

	<input>
		<keyboard>
			<!-- set 12.5% flap adjustment with each detent --> 
			<key n="91">
				<name>[</name>
				<desc>Decrease flaps.</desc>
				<binding>
					<command>property-adjust</command>
					<property>/controls/flight/flaps</property>
					<step type="double">-0.125</step>
				</binding>
			</key>
			<key n="93">
				<name>]</name>
				<desc>Increase flaps.</desc>
				<binding>
					<command>property-adjust</command>
					<property>/controls/flight/flaps</property>
					<step type="double">0.125</step>
				</binding>
			</key>
			<!--Changed by Ampere -->
			<!-- Q or q -->
			<key n="81">
				<name>Q</name>
				<desc>steer NLG left.</desc>
				<binding>
					<command>nasal</command>
					<script>
						STEP = 0.1;
						propDir = "/controls/gear/handle-steer-norm[0]";
						
						steering = getprop(propDir);
						
						if (steering == nil)
						{	setprop(propDir, 0);
						}
						else
						{	steering = steering - STEP;
							if (-steering > 1){steering = -1;}
							setprop(propDir, steering);
						}
					</script>
				</binding>			</key>
			<key n="113">
				<name>q</name>
				<desc>steer NLG left.</desc>
				<binding>
					<command>nasal</command>
					<script>
						STEP = 0.1;
						propDir = "/controls/gear/handle-steer-norm[0]";
						
						steering = getprop(propDir);
						
						if (steering == nil)
						{	setprop(propDir, 0);
						}
						else
						{	steering = steering - STEP;
							if (-steering > 1){steering = -1;}
							setprop(propDir, steering);
						}
					</script>
				</binding>
			</key>
			<!-- E or e -->
			<key n="69">
				<name>E</name>
				<desc>steer NLG right.</desc>
				<binding>
					<command>nasal</command>
					<script>
						STEP = 0.1;
						propDir = "/controls/gear/handle-steer-norm[0]";
						
						steering = getprop(propDir);
						
						if (steering == nil)
						{	setprop(propDir, 0);
						}
						else
						{	steering = steering + STEP;
							if (steering > 1){steering = 1;}
							setprop(propDir, steering);
						}
					</script>
				</binding>
			</key>
			<key n="101">
				<name>e</name>
				<desc>steer NLG right.</desc>
				<binding>
					<command>nasal</command>
					<script>
						STEP = 0.1;
						propDir = "/controls/gear/handle-steer-norm[0]";
						
						steering = getprop(propDir);
						
						if (steering == nil)
						{	setprop(propDir, 0);
						}
						else
						{	steering = steering + STEP;
							if (steering > 1){steering = 1;}
							setprop(propDir, steering);
						}
					</script>
				</binding>
			</key>
			<!--Change ends-->
		</keyboard>
	</input>
 
	<!--Changed by Ampere -->
	
	<!--Change ends-->
	<!--Changed by Ampere -->
	<!--Create our own properties -->
	
	<!--
	<surface-positions>
		<HST-pos-norm type="double">0.0</HST-pos-norm>
	</surface-positions>	
	-->
	<!--
	<nasal>
		<!- Switch: ->
		<!- Conversion functions ->
		<base_converter>
			<file>Aircraft/A380/Systems/AFDX/Switch/converter.nas</file>
			<script>
				globals.asciiToDec = asciiToDec;
				globals.baseToDec = baseToDec;
				globals.decToAscii = decToAscii;
				globals.decToBase = decToBase;
				globals.decToHex = decToHex;
				globals.hexToDec = hexToDec;
			</script>
		</base_converter>
		<!- Load all abstract data types ->
		<queue>
			<file>Aircraft/A380/Systems/AFDX/Switch/queue.nas</file>
			<script>
				globals.Queue = Queue;
			</script>
		</queue>
		<binary_tree>
			<file>Aircraft/A380/Systems/AFDX/Switch/binarytree.nas</file>
			<script>
				globals.BinaryTree = BinaryTree;
			</script>
		</binary_tree>
		<binary_search_tree>
			<file>Aircraft/A380/Systems/AFDX/Switch/binarysearchtree.nas</file>
			<script>
				globals.BinarySearchTree = BinarySearchTree;
			</script>
		</binary_search_tree>
		<!- Load all hard components of the switch ->
		<port>
			<file>Aircraft/A380/Systems/AFDX/Switch/port.nas</file>
			<script>
				globals.Port = Port;
			</script>
		</port>
		<switch_port>
			<file>Aircraft/A380/Systems/AFDX/Switch/switchport.nas</file>
			<script>
				globals.SwitchPort = SwitchPort;
			</script>
		</switch_port>
		<!- Load all soft components of the switch ->
		<protocols>
			<file>Aircraft/A380/Systems/AFDX/Switch/protocols.nas</file>
			<script>
				globals.BPDU = BPDU;
				globals.Frame = Frame;
				globals.LLC = LLC;
			</script>
		</protocols>
		<address_table>
			<file>Aircraft/A380/Systems/AFDX/Switch/addresstable.nas</file>
			<script>
				globals.AddressTable = AddressTable;
			</script>
		</address_table>
		<!- Switch ->
		<switch>
			<file>Aircraft/A380/Systems/AFDX/Switch/switch.nas</file>
			<script>
				globals.Switch = Switch;
			</script>
		</switch>
		<!- Bus ->
		<bus>
			<file>Aircraft/A380/Systems/AFDX/Bus/bus.nas</file>
			<script>
				globals.Bus = Bus;
			</script>
		</bus>
		
		<!- Define AFDX Network ->
		<define_afdx>
			<file>Aircraft/A380/Systems/AFDX/afdx.nas</file>
			<script>
				Network.create();
				Network.makeConnections();
			</script>
		</define_afdx>
		
		<!- AFDX Network: S_1_sw1 ->
		<S_1_sw1>
			<script>
				run = func{
					switch1.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_1_sw1>
		
		<!- AFDX Network: S_1_sw2 ->
		<S_1_sw2>
			<script>
				run = func{
					switch2.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_1_sw2>
		
		<!- AFDX Network: S_1_sw3 ->
		<S_1_sw3>
			<script>
				run = func{
					switch3.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_1_sw3>
		
		<!- AFDX Network: S_2_sw1 ->
		<S_2_sw1>
			<script>
				run = func{
					switch4.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_2_sw1>
		
		<!- AFDX Network: S_2_sw2 ->
		<S_2_sw2>
			<script>
				run = func{
					switch5.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_2_sw2>
		
		<!- AFDX Network: S_3_sw1 ->
		<S_3_sw1>
			<script>
				run = func{
					switch6.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_3_sw1>
		
		<!- AFDX Network: S_3_sw2 ->
		<S_3_sw2>
			<script>
				run = func{
					switch7.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_3_sw2>
		
		<!- AFDX Network: S_4_sw1 ->
		<S_4_sw1>
			<script>
				run = func{
					switch8.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_4_sw1>
		
		<!- AFDX Network: S_4_sw2 ->
		<S_4_sw2>
			<script>
				run = func{
					switch9.update();
					settimer(run, 0.05);
				}
				settimer(run, 0);
			</script>
		</S_4_sw2>

	</nasal>-->
	<!--Change ends-->

</PropertyList>


